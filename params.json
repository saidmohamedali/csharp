{"name":"Csharp(C#) Main Topics","tagline":"(This page is under construction) Welcome to this C# Main Topics Document. Here you will find C# (pronounced C Sharp) key topics summaries and links for better knowledge","body":"Every one can be a C# developer but being a good developer meant to constantly review some key topics.\r\nThis page is not **tutorial for c#**, it is more like \"**did you know that...?**\".\r\nTopics are not exhaustive but they are essential and organized like a check-list.\r\n\r\n# Generics\r\n\r\nGenerics provide type safety without the overhead of multiple implementations.\r\nIt offers the ability to write a single class that other client code can use without incurring the cost or risk of runtime casts or boxing operations.\r\nBut there are few thinks to keep in mind while using generics.\r\n\r\nScenario:_**Why does this code not compile?**_\r\n```csharp\r\npublic class Generic<T>\r\n{\r\n    public T Field; \r\n    public T AddSub()\r\n    {\r\n        T i = Field + 1;\r\n    }\r\n}\r\n```\r\n\r\n_**The answer is:**_ the ** + operator** is not defined for T.\r\nFor further information, please visit: [Generics](http://msdn.microsoft.com/en-us/library/c6cyy67b%28v=vs.90%29.aspx).\r\n\r\n## Constraints\r\n\r\nScenario1:_**Why does this code not compile?**_\r\n```csharp\r\n class CustomFactory<T> \r\n    {\r\n        public T CreateItem()\r\n        {\r\n            return new T();\r\n        }\r\n    }\r\n```\r\n\r\n_**The answer is**_ : CreateItem Methode tries to  instantiate a new object of type T and the compile does not now if there is a parameter-less constructor of type T so to make it work we need add **new** constraint to this generic class.\r\nfor more information please go to:\r\n* [New constraint](http://msdn.microsoft.com/en-us/library/sd2w2ew5.aspx)\r\n\r\nScenario2:_**What will be printed on the Console and Why?**_\r\n```csharp\r\npublic static void PrintAreEqual<T>(T s, T t) where T : class\r\n{\r\nSystem.Console.WriteLine(s == t);\r\n}\r\nstatic void Main()\r\n{\r\n            string s1 = \"target\";\r\n            System.Text.StringBuilder sb = new System.Text.StringBuilder(\"target\");\r\n            string s2 = sb.ToString();\r\n            PrintAreEqual<string>(s1, s2);\r\n            Console.Read();\r\n}\r\n```\r\n\r\n_**The answer is**_ : False.  Using **where T : class constraint** induce that == will check reference equality and not value equality.\r\nfor more information please go to:\r\n* [constraint](http://msdn.microsoft.com/en-us/library/d5x73970.aspx)\r\n\r\n## Generic Collections\r\n## Variance\r\n# Expressions\r\n## Operators\r\n## Query Expressions\r\n# Arrays and Collections\r\n## Array and Collection Usage\r\n# Class Members\r\n## Readonly and Constant Fields\r\n## Modifiers\r\n## Static/Instance Members\r\n## Properties and Indexers\r\n## Methods\r\n# Reference and Value Types\r\n## Classes and Structs\r\n## Primitive Datatypes\r\n## Boxing and Unboxing\r\n# Resources and COM\r\n## Unmanaged Resources\r\n## Platform Invoke (P/Invoke)\r\n# Flow of control\r\n## Jump Statements\r\n## Selection Statements\r\n## Iteration Statements\r\n# Delegates and Events\r\n## Event Creation and Usage\r\n## Asynchronous Processing\r\n## Action and Func\r\n# Exceptions\r\n## Exception Handling\r\n## Rethrowing Exceptions","google":"C#, c#, csharp, .net","note":"Don't delete this file! It's used internally to help with page regeneration."}